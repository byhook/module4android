apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    signingConfigs {
        config {
            Properties buildProps = getSign()
            storeFile file(buildProps['STORE_FILE'])
            keyAlias buildProps['KEY_ALIAS']
            keyPassword buildProps['KEY_PASSWORD']
            storePassword buildProps['STORE_PASSWORD']
        }
    }
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":module-network")
    implementation project(":module-utils")

    implementation rootProject.ext.dependencies["appcompat"]
    implementation rootProject.ext.dependencies["constraintlayout"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["ext.junit"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
}

/**
 * 读取配置签名
 * @return
 */
def getSign() {
    Properties buildProperties = new Properties()
    buildProperties.load(new FileInputStream(file('../config/signature.properties')))
    return buildProperties
}